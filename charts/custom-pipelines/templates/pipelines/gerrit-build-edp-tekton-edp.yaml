{{ if has "gerrit" .Values.global.gitProviders }}
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-tekton-other-app-build-edp
  labels:
    {{- include "edp-custom-pipelines.labels" . | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-{{ .Release.Namespace }}.{{ .Values.global.dnsWildCard }}/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:

{{- include "gerrit-build-start" . | nindent 4 }}

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

{{- include "get-cache" $ | nindent 4 }}

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: 'epamedp/tekton-python-make:0.1.6'
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

{{- include "save-cache" $ | nindent 4 }}

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)

{{ include "finally-block-edp" . | nindent 2 }}

{{ include "send-to-microsoft-teams-build" . | nindent 4 }}

{{ end }}
