apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: keycloak-integration-tests
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  workspaces:
    - name: source
  params:
    - name: CODEBASE_NAME
      type: string
    - name: E2E_HOST_NS
      type: string
      default: "e2e-vcluster"
    - name: GOLANG_IMAGE
      type: string
      default: "golang:1.22-bookworm"
    - name: TOOLS_IMAGE
      type: string
      default: "epamedp/tekton-helm:0.1.6"
    - name: GOCACHE
      description: "Go caching directory path"
      default: "$(workspaces.source.path)"
      type: string
    - name: GOMODCACHE
      description: "Go mod caching directory path"
      default: ""
      type: string
    - name: GOPROXY
      description: "Go proxy server"
      default: ""
      type: string
  results:
    - name: release_name
    - name: svc_name

  steps:
    - name: vcluster-start
      image: $(params.TOOLS_IMAGE)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x

        random_str=$(echo $RANDOM | md5sum | head -c 10)
        release_name=$(echo "${CODEBASE_NAME}-integration-tests-${random_str}" | tr '[:upper:]' '[:lower:]')

        vcluster create ${release_name} \
         -n ${E2E_HOST_NS} \
         --connect=false \
         --update-current=false

        printf "%s" "${release_name}" > "$(results.release_name.path)"

    - name: deploy-keycloak
      image: $(params.TOOLS_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x
        release_name=$(cat $(results.release_name.path))

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl create ns ${CODEBASE_NAME}

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl apply -f tests/e2e/helm-success-path/01-install-keycloak-server.yaml \
          --namespace ${CODEBASE_NAME}

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl wait --for condition=Available=True deployment keycloak \
          --timeout=120s --namespace ${CODEBASE_NAME}

        svc_name=$(kubectl get service --namespace ${E2E_HOST_NS} \
          --selector=vcluster.loft.sh/managed-by=${release_name},vcluster.loft.sh/namespace=${CODEBASE_NAME} \
          --no-headers \
          -o custom-columns=":metadata.name")

        printf "%s" "${svc_name}" > "$(results.svc_name.path)"

    - name: go-test
      image: $(params.GOLANG_IMAGE)
      workingDir: $(workspaces.source.path)
      onError: continue
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
        - name: GOCACHE
          value: "$(params.GOCACHE)"
        - name: GOMODCACHE
          value: "$(params.GOMODCACHE)"
        - name: GOPROXY
          value: "$(params.GOPROXY)"
      script: |
        svc_name=$(cat $(results.svc_name.path))
        TEST_KEYCLOAK_URL="http://${svc_name}.${E2E_HOST_NS}:8081" make test

    - name: vcluster-remove
      image: $(params.TOOLS_IMAGE)
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        release_name=$(cat $(results.release_name.path))
        vcluster -n ${E2E_HOST_NS} delete ${release_name}

    - name: go-test-verify-exitcode
      image: alpine:3.18.6
      script: |
        exitCode=$(cat $(steps.step-go-test.exitCode.path))
        if [ $exitCode == 0 ]; then
            echo "The exit code contains zero status code: ${exitCode}"
        else
            echo "The exit code contains non-zero status code: ${exitCode}"
            exit 1
        fi
