{{ if has "github" .Values.global.gitProviders }}
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-rpm-java17-app-build-edp
  labels:
    app.edp.epam.com/pipelinetype: build
    {{- include "edp-tekton.labels" $ | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://portal-{{ $.Release.Namespace }}.{{ $.Values.global.dnsWildCard }}/c/main/pipelines/$(context.pipelineRun.namespace)/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
      default: ""
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""

  results:
    - description: VCS tag
      name: VCS_TAG
      type: string
      value: $(tasks.get-version.results.VCS_TAG)

  tasks:

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: rpm-build
      taskRef:
        kind: Task
        name: rpm-build
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase_name
          value: "$(params.CODEBASE_NAME)"
        - name: suffix
          value: "$(tasks.get-version.results.SUFFIX)"
        - name: numeric_version
          value: "$(tasks.get-version.results.NUMERIC_VERSION)"
        - name: EXTRA_LINT_COMMAND
          value: |
            make rpm-lint NAME=${CODEBASE_NAME}
        - name: EXTRA_BUILD_COMMAND
          value: >
            make rpm-build NAME=${CODEBASE_NAME} VERSION=${NUMERIC_VERSION} RELEASE=${SUFFIX}
        - name: EXTRA_PUSH_COMMAND
          value: >
            make publish NAME=${CODEBASE_NAME} RELEASE=${SUFFIX} VERSION=${NUMERIC_VERSION} CI_USERNAME=${CI_USERNAME} CI_PASSWORD=${CI_PASSWORD} NEXUS_HOST_URL=${NEXUS_HOST_URL}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - rpm-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)

  finally:
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)

    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
        - name: GIT_URL
          value: $(params.git-source-url)
---
{{ end }}
