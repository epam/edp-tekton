{{ if and (has "gitlab" .Values.global.gitProviders) .Values.pipelines.deployableResources.security }}
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gitlab-security-scan
  labels:
    {{- include "edp-tekton.labels" $ | nindent 4 }}
    app.edp.epam.com/triggertemplate: gitlab-security-template
    app.edp.epam.com/pipelinetype: security
spec:
  description: >-
    A specialized pipeline for GitLab projects that executes a trio of security tools:
    gitleaks for detecting credential exposure, cdxgen for dependency analysis and SBOM creation,
    and semgrep for identifying code vulnerabilities. Security findings are automatically
    synchronized with DefectDojo for comprehensive vulnerability lifecycle management.
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://portal-{{ $.Release.Namespace }}.{{ $.Values.global.dnsWildCard }}/c/main/pipelines/pipelineruns/$(context.pipelineRun.namespace)/$(context.pipelineRun.name)
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "main"
      type: string
    - name: git-source-url
      description: 'url to checkout'
      default: "https://gitlab.com/Rolika4/springboot.git"
      type: string
    - name: CODEBASE_NAME
      default: 'gradle'
      description: "Project name"
      type: string
  results:
    - description: DefectDojo URL with the generated vulnerability scan reports
      name: SCAN_REPORT_URL
      type: string
      value: $(tasks.security.results.SCAN_REPORT_URL)
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - init-values
      params:
        - name: DD_PRODUCT_NAME
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: DD_ENGAGEMENT_NAME
          value: "$(params.CODEBASE_NAME)-$(params.git-source-revision)"
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
{{ end }}
