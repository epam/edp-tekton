{{ if .Values.pipelines.deployableResources.tasks }}
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sync-app
spec:
  description: |
    This task is used to deploy Codebases across specific Environment using ApplicationSet object.

  params:
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: DEPLOYMENT_FLOW
      type: string
      description: |
        KRCI kind:CDPipeline name used for deployment. For example: mypipe, myfeature
    - name: ENVIRONMENT
      description: |
        KRCI kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
      type: string
  results:
    - description: APPLICATIONS_PAYLOAD
      name: APPLICATIONS_PAYLOAD
      type: string
  steps:
    - name: update-argo-appset
      image: {{ include "edp-tekton.registry" . }}/epamedp/tekton-cd-pipeline:0.1.4
      env:
        - name: ARGOCD_URL
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: url
        - name: ARGOCD_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: token
      envFrom:
        - configMapRef:
            name: $(params.DEPLOYMENT_FLOW)-$(params.ENVIRONMENT)
      script: |
        set -ex

        export ARGOCD_OPTS="--core=false --grpc-web"
        # the address of the Argo CD server without https:// prefix
        export ARGOCD_SERVER=${ARGOCD_URL#*//}

        pipeline=$(params.DEPLOYMENT_FLOW)
        stage=$(params.ENVIRONMENT)
        # quotes are important here
        new_tags='$(params.APPLICATIONS_PAYLOAD)'

        selector="app.edp.epam.com/stage=$(params.ENVIRONMENT),app.edp.epam.com/pipeline=$(params.DEPLOYMENT_FLOW)"

        patch=$(kubectl get applicationset $pipeline -o json | jq --argjson updates "$new_tags" --arg stage $stage '
          .spec.generators[0].list.elements |= map(
            if (.stage == $stage) and (.codebase | IN($updates | keys[])) then
              .imageTag = $updates[.codebase].imageTag
              # Update customValues field if customValues is true in payload
              | .customValues = if ($updates[.codebase].customValues == true) then true elif ($updates[.codebase].customValues == false) then false else .customValues end
            else
              .
            end
          )
        ')

        kubectl patch applicationset $pipeline --type=merge -p "$patch"

        # Delay to ensure the Argo CD Application controller has enough time to process the updated ApplicationSet resource.
        sleep 5

    - name: argocd-diff
      image: {{ include "edp-tekton.registry" . }}/bitnami/kubectl:1.25.4
      env:
        - name: ARGOCD_URL
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: url
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)
        - name: DEPLOYMENT_FLOW
          value: $(params.DEPLOYMENT_FLOW)
        - name: ENVIRONMENT
          value: $(params.ENVIRONMENT)
      envFrom:
        - configMapRef:
            name: $(params.DEPLOYMENT_FLOW)-$(params.ENVIRONMENT)
      script: |
        #!/usr/bin/env bash
        set -e

        apps=($(echo $APPLICATIONS_PAYLOAD | jq -r 'keys[]'))

        for app in "${apps[@]}"; do
          echo "ArgoCD diff for $app application:"
          echo "${ARGOCD_URL}/applications/${NAMESPACE}/${DEPLOYMENT_FLOW}-${ENVIRONMENT}-$app"
        done

{{ end }}
