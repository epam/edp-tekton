apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: edp-npm
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run npm goals on a project
    where package.json is present and has some pre-defined
    npm scripts.
  params:
    - name: PATH_CONTEXT
      type: string
      default: "source"
      description: The path where package.json of the project is defined.
    - name: BASE_IMAGE
      type: string
      default: "docker.io/library/node:18.20.3-alpine3.20"
      description: The node image you want to use.
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: ci-sonarqube
      type: string
      description: name of the secret for the Sonarqube integration
      default: "ci-sonarqube"
    - name: CACHE_DIR
      default: "/workspace/source/cache"
      description: The path to the cache directory.

  workspaces:
    - name: source

  volumes:
    - name: settings-npm
      configMap:
        name: {{ .Values.tekton.configs.npmConfigMap }}

  steps:
    - name: init
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)

      volumeMounts:
        - name: settings-npm
          mountPath: /var/configmap
      {{- if .Values.tekton.packageRegistriesSecret.enabled }}
      envFrom:
      - secretRef:
          name: {{ .Values.tekton.packageRegistriesSecret.name }}
      {{- end }}

      env:
        - name: HOME
          value: "$(workspaces.source.path)/"
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
        - name: NPM_CACHE_DIR
          value: $(params.CACHE_DIR)
      script: |
        #!/usr/bin/env sh
        set -e
        
        export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
        export npm_config_userconfig=/var/configmap/.npmrc-ci
        export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
        npm ci

    - name: build
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      script: |
        npm run build:prod
      {{ if eq .Values.global.platform "openshift" }}
      securityContext:
        runAsUser: 0
      {{ end }}

    - name: test
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      script: |
        npm run test:coverage
      {{ if eq .Values.global.platform "openshift" }}
      securityContext:
        runAsUser: 0
      {{ end }}

{{- include "resources" . | nindent 6 }}
