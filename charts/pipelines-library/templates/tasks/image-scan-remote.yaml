{{- if .Values.pipelines.deployableResources.tasks }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: image-scan-remote
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
spec:
  description: >-
    This task scans container images from remote registries for vulnerabilities using Trivy and Grype
    and uploads the scan reports to DefectDojo.
  workspaces:
    - name: source
  params:
    - name: ECR_LOGIN
      type: string
      default: '/workspace/ecr_login_pass'
    - name: krci-config
      type: string
      description: this configmap holds aws_region parameter
      default: krci-config
    - name: IMAGE_NAMES
      type: array
      description: List of container images to be scanned. Each image can be in the format
        `repository/image:tag` or `repository/image`.
    - name: COMPONENT_NAME
      type: string
      description: Name of the component to which the images belong.
        Pipeline will use this name to create/update the appropriate
        Engagement with scan reports in DefectDojo.
    - name: BASE_IMAGE_TRIVY
      type: string
      default: "{{ include "edp-tekton.registry" . }}/aquasec/trivy:0.65.0"
    - name: BASE_IMAGE_GRYPE
      type: string
      default: "{{ include "edp-tekton.registry" . }}/anchore/grype:v0.97.1-debug"
    - name: BASE_IMAGE
      type: string
      default: "{{ include "edp-tekton.registry" . }}/epamedp/tekton-autotest:0.1.8"
    - name: TRIVY_SCAN_REPORT
      type: string
      description: The name of the Trivy scan report
      default: image-scan-trivy-report.json
    - name: GRYPE_SCAN_REPORT
      type: string
      description: The name of the Grype scan report
      default: image-scan-grype-report.json
    - name: ci-defectdojo
      type: string
      description: Name of the secret holding the DefectDojo CI integration data
      default: ci-defectdojo
  results:
    - name: SCAN_REPORT_URL
      description: DefectDojo URL with the generated vulnerability scan reports
  steps:
    - name: get-ecr-pass
      image: {{ include "edp-tekton.registry" . }}/amazon/aws-cli:2.28.3
      env:
        - name: ECR_LOGIN
          value: "$(params.ECR_LOGIN)"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: "$(params.krci-config)"
              key: aws_region
              optional: true
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: "$(params.krci-config)"
              key: container_registry_type
      script: |
        if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
          aws ecr get-login-password --region "${AWS_REGION}" > "${ECR_LOGIN}"
        else
          echo 'Registry not ECR, stage skipped';
        fi

    - name: trivy
      args: ["$(params.IMAGE_NAMES[*])"]
      image: $(params.BASE_IMAGE_TRIVY)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        set -e

        for IMAGE in "$@"; do
          COMPONENT_NAME=$(basename "${IMAGE%%:*}")
          REPORT_FILE="trivy-report-${COMPONENT_NAME}.json"

          trivy image --format json -o "$REPORT_FILE" "$IMAGE"

          cat "$REPORT_FILE"
        done

    - name: grype
      args: ["$(params.IMAGE_NAMES[*])"]
      image: $(params.BASE_IMAGE_GRYPE)
      workingDir: $(workspaces.source.path)
      env:
        - name: ECR_LOGIN
          value: "$(params.ECR_LOGIN)"
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              key: container_registry_type
              name: "$(params.krci-config)"
      securityContext:
        runAsUser: 0
      script: |
        #!/busybox/sh
        set -e

        for IMAGE in "$@"; do
          COMPONENT_NAME=$(basename "${IMAGE%%:*}")
          REPORT_NAME="grype-report-${COMPONENT_NAME}.json"

          if [[ "${CONTAINER_REGISTRY_TYPE}" == "ecr" && "${IMAGE}" == *".ecr."* ]]; then
            GRYPE_REGISTRY_AUTH_USERNAME=AWS \
            GRYPE_REGISTRY_AUTH_PASSWORD=$(cat "${ECR_LOGIN}") \
            /grype "${IMAGE}" -o json > "${REPORT_NAME}"
          else
            /grype "${IMAGE}" -o json > "${REPORT_NAME}"
          fi

          cat "${REPORT_NAME}"
        done

    - name: upload-report
      args: ["$(params.IMAGE_NAMES[*])"]
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: DD_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: $(params.ci-defectdojo)
        - name: DD_HOST_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: $(params.ci-defectdojo)
        - name: DD_PRODUCT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      script: |
        #!/usr/bin/env sh
        set -e

        PRODUCT_ID=$(curl -s -X GET "${DD_HOST_URL}/api/v2/products/?name_exact=${DD_PRODUCT_NAME}" \
          -H "accept: application/json" \
          -H "Authorization: Token ${DD_TOKEN}" \
          | jq -r '.results[0].id')

        for IMAGE in "$@"; do
          COMPONENT_NAME=$(basename "${IMAGE%%:*}")

          for SCAN_TYPE in "Trivy Scan" "Anchore Grype"; do
            if [ "$SCAN_TYPE" = "Trivy Scan" ]; then
              REPORT_NAME="trivy-report-${COMPONENT_NAME}.json"
            else
              REPORT_NAME="grype-report-${COMPONENT_NAME}.json"
            fi

            curl -s -X POST "${DD_HOST_URL}/api/v2/reimport-scan/" \
              -H "accept: application/json" \
              -H "Authorization: Token ${DD_TOKEN}" \
              -H "Content-Type: multipart/form-data" \
              -F "scan_date=$(date +%Y-%m-%d)" \
              -F "minimum_severity=Info" \
              -F "active=true" \
              -F "verified=false" \
              -F "scan_type=${SCAN_TYPE}" \
              -F "file=@${REPORT_NAME};type=application/json" \
              -F "product_type_name=Tenant" \
              -F "product_name=${DD_PRODUCT_NAME}" \
              -F "engagement_name=$(params.COMPONENT_NAME)" \
              -F "auto_create_context=true" \
              -F "close_old_findings=true" \
              -F "push_to_jira=false" \
              -F "environment=Development" \
              -F "test_title=${COMPONENT_NAME}" \
              -F "tags=${IMAGE%:*}"
          done
        done

        ENGAGEMENT_ID=$(curl -s -X GET "${DD_HOST_URL}/api/v2/engagements/?product=${PRODUCT_ID}&name=$(params.COMPONENT_NAME)" \
          -H "accept: application/json" \
          -H "Authorization: Token ${DD_TOKEN}" \
          | jq -r '.results[0].id')

        SCAN_REPORT_URL="${DD_HOST_URL}/engagement/${ENGAGEMENT_ID}"
        printf "%s" "$SCAN_REPORT_URL" > "$(results.SCAN_REPORT_URL.path)"
{{- end }}
