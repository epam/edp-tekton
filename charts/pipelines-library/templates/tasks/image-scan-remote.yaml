{{- if .Values.pipelines.deployableResources.tasks }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: image-scan-remote
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
spec:
  description: >-
    This task scans container images from remote registries for vulnerabilities using Trivy and Grype
    and uploads the scan reports to DefectDojo.
  workspaces:
    - name: source
  params:
    - name: ECR_LOGIN
      type: string
      default: '/workspace/ecr_login_pass'
    - name: krci-config
      type: string
      description: this configmap holds aws_region parameter
      default: krci-config
    - name: IMAGE_NAME
      type: string
      description: The full reference of the container image to be scanned, including the registry URL and tag.
    - name: COMPONENT_NAME
      type: string
      description: The name of the component associated with the scanned image, used for identification in reports.
      default: java-app-main
    - name: BASE_IMAGE_TRIVY
      type: string
      default: "{{ include "edp-tekton.registry" . }}/aquasec/trivy:0.59.1"
    - name: BASE_IMAGE_GRYPE
      type: string
      default: "{{ include "edp-tekton.registry" . }}/anchore/grype:v0.87.0-debug"
    - name: BASE_IMAGE_CURL
      type: string
      default: "{{ include "edp-tekton.registry" . }}/alpine/curl:8.12.0"
    - name: TRIVY_SCAN_REPORT
      type: string
      description: The name of the Trivy scan report
      default: image-scan-trivy-report.json
    - name: GRYPE_SCAN_REPORT
      type: string
      description: The name of the Grype scan report
      default: image-scan-grype-report.json
    - name: ci-defectdojo
      type: string
      description: Name of the secret holding the DefectDojo CI integration data
      default: ci-defectdojo
  steps:
    - name: get-ecr-pass
      image: {{ include "edp-tekton.registry" . }}/amazon/aws-cli:2.7.35
      env:
        - name: ECR_LOGIN
          value: "$(params.ECR_LOGIN)"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: "$(params.krci-config)"
              key: aws_region
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: "$(params.krci-config)"
              key: container_registry_type
      script: |
        if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
          aws ecr get-login-password --region "${AWS_REGION}" > "${ECR_LOGIN}"
        else
          echo 'Registry not ECR, stage skipped';
        fi

    - name: trivy
      image: $(params.BASE_IMAGE_TRIVY)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        set -e

        trivy image --format json -o $(params.TRIVY_SCAN_REPORT) $(params.IMAGE_NAME)

        cat $(params.TRIVY_SCAN_REPORT)

    - name: grype
      image: $(params.BASE_IMAGE_GRYPE)
      workingDir: $(workspaces.source.path)
      env:
        - name: ECR_LOGIN
          value: "$(params.ECR_LOGIN)"
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              key: container_registry_type
              name: "$(params.krci-config)"
      script: |
        #!/busybox/sh
        set -e

        if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
          GRYPE_REGISTRY_AUTH_USERNAME=AWS GRYPE_REGISTRY_AUTH_PASSWORD=$(cat "${ECR_LOGIN}") /grype $(params.IMAGE_NAME) -o json > $(params.GRYPE_SCAN_REPORT)
        else
          /grype $(params.IMAGE_NAME) -o json > $(params.GRYPE_SCAN_REPORT)
        fi

        cat $(params.GRYPE_SCAN_REPORT)

    - name: upload-report
      image: $(params.BASE_IMAGE_CURL)
      workingDir: $(workspaces.source.path)
      env:
        - name: DD_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: $(params.ci-defectdojo)
        - name: DD_HOST_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: $(params.ci-defectdojo)
        - name: DD_PRODUCT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      script: |
        #!/usr/bin/env sh
        set -e

        for REPORT_NAME in $(params.TRIVY_SCAN_REPORT) $(params.GRYPE_SCAN_REPORT)
        do
            SCAN_TYPE=""
            if [ "$REPORT_NAME" = "$(params.TRIVY_SCAN_REPORT)" ]; then
                SCAN_TYPE="Trivy Scan"
            elif [ "$REPORT_NAME" = "$(params.GRYPE_SCAN_REPORT)" ]; then
                SCAN_TYPE="Anchore Grype"
            fi

            curl -X POST "${DD_HOST_URL}/api/v2/reimport-scan/" \
                -H "accept: application/json" \
                -H "Authorization: Token ${DD_TOKEN}" \
                -H "Content-Type: multipart/form-data" \
                -F "scan_date=$(date +%Y-%m-%d)" \
                -F "minimum_severity=Info" \
                -F "active=true" \
                -F "verified=false" \
                -F "scan_type=${SCAN_TYPE}" \
                -F "file=@${REPORT_NAME};type=application/json" \
                -F "product_type_name=Tenant" \
                -F "product_name=${DD_PRODUCT_NAME}" \
                -F "engagement_name=$(params.COMPONENT_NAME)" \
                -F "auto_create_context=true" \
                -F "close_old_findings=true" \
                -F "push_to_jira=false" \
                -F "environment=Development" \
                -F "test_title=image-scan" \
                -F "tags=${SCAN_TYPE},$(params.IMAGE_NAME)"
        done
{{- end }}
