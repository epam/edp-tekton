{{ if .Values.pipelines.deployableResources.tasks }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: image-scan
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task scans container images for vulnerabilities using Trivy and Grype, generates reports in JSON format, and uploads the reports to DefectDojo.
  workspaces:
    - name: source
  params:
    - name: IMAGE_TAR
      type: string
      description: Name (reference) of the image tar package.
    - name: BASE_IMAGE_TRIVY
      type: string
      default: "{{ include "edp-tekton.registry" . }}/aquasec/trivy:0.59.1"
    - name: BASE_IMAGE_GRYPE
      type: string
      default: "{{ include "edp-tekton.registry" . }}/anchore/grype:v0.87.0-debug"
    - name: BASE_IMAGE_CURL
      type: string
      default: "{{ include "edp-tekton.registry" . }}/alpine/curl:8.12.0"
    - name: PATH_CONTEXT
      description: The build context used by Trivy.
      default: "."
    - name: TRIVY_SCAN_REPORT
      type: string
      description: The name of the Trivy scan report
      default: image-scan-trivy-report.json
    - name: GRYPE_SCAN_REPORT
      type: string
      description: The name of the Grype scan report
      default: image-scan-grype-report.json
    - name: DD_PRODUCT_NAME
      type: string
    - name: DD_ENGAGEMENT_NAME
      type: string
    - name: ci-defectdojo
      type: string
      description: name of the secret holding the DefectDojo CI integration data
      default: ci-defectdojo
  steps:
    - name: trivy
      image: $(params.BASE_IMAGE_TRIVY)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      script: |
        #!/usr/bin/env sh
        set -e

        trivy image --format json \
            -o $(params.TRIVY_SCAN_REPORT) --input $(params.IMAGE_TAR).tar

        cat $(params.TRIVY_SCAN_REPORT)

    - name: grype
      image: $(params.BASE_IMAGE_GRYPE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      script: |
        #!/busybox/sh
        set -e

        /grype $(params.IMAGE_TAR).tar -o json > $(params.GRYPE_SCAN_REPORT)

        cat $(params.GRYPE_SCAN_REPORT)

    - name: upload-report
      image: $(params.BASE_IMAGE_CURL)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      env:
        - name: DD_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: $(params.ci-defectdojo)
        - name: DD_HOST_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: $(params.ci-defectdojo)
      script: |
        #!/usr/bin/env sh
        set -e

        for REPORT_NAME in $(params.TRIVY_SCAN_REPORT) $(params.GRYPE_SCAN_REPORT)
        do
            SCAN_TYPE=""
            if [ "$REPORT_NAME" = "$(params.TRIVY_SCAN_REPORT)" ]; then
                SCAN_TYPE="Trivy Scan"
            elif [ "$REPORT_NAME" = "$(params.GRYPE_SCAN_REPORT)" ]; then
                SCAN_TYPE="Anchore Grype"
            fi

            curl -X POST "${DD_HOST_URL}/api/v2/reimport-scan/" \
                -H "accept: application/json" \
                -H "Authorization: Token ${DD_TOKEN}" \
                -H "Content-Type: multipart/form-data" \
                -F "scan_date=$(date +%Y-%m-%d)" \
                -F "minimum_severity=Info" \
                -F "active=true" \
                -F "verified=false" \
                -F "scan_type=${SCAN_TYPE}" \
                -F "file=@${REPORT_NAME};type=application/json" \
                -F "product_type_name=Tenant" \
                -F "product_name=$(params.DD_PRODUCT_NAME)" \
                -F "engagement_name=$(params.DD_ENGAGEMENT_NAME)" \
                -F "auto_create_context=true" \
                -F "close_old_findings=true" \
                -F "push_to_jira=false" \
                -F "environment=Development" \
                -F "test_title=security-scan"
        done
{{ end }}
