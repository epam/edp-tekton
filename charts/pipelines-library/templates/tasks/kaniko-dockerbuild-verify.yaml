apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dockerbuild-verify
  labels:
    app.kubernetes.io/based-on: "0.6"
    {{- include "edp-tekton.labels" . | nindent 4 }}
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a Dockerfile with kaniko.
  params:
    - name: codebase-name
      description: Name of codebase
      default: "placeholder"
    - name: image-tag
      description: Image tag
      default: "lastest"
    - name: image-tar
      description: Name (reference) of the image tar.
      default: "image_tar"
    - name: dockerfile
      description: Dockerfile name.
      default: "Dockerfile"
    - name: context
      description: The build context used by Kaniko.
      default: ./
      description: The build context used by Kaniko.
      default: ./
    - name: builder-image
      description: The image on which builds will run
      default: {{ .Values.kaniko.image.repository }}:{{ .Values.kaniko.image.tag }}-debug
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: build-no-push
      workingDir: $(workspaces.source.path)
      image: "$(params.builder-image)"
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: IMAGE_TAR
          value: "$(params.image-tar)"
        - name: DOCKERFILE
          value: "$(params.dockerfile)"
        - name: CONTEXT
          value: "$(params.context)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_GROUP
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
      script: |
        /kaniko/executor \
          --dockerfile=$(workspaces.source.path)/${DOCKERFILE} \
          --context=$(workspaces.source.path)/${CONTEXT} \
          --destination=${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}:${IMAGE_TAG} \
          --digest-file=$(results.IMAGE_DIGEST.path) \
          --tar-path=${IMAGE_TAR}.tar \
          --no-push
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
{{- include "resources" . | nindent 6 }}
