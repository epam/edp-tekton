apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-to-jira
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
  annotations:
    tekton.dev/displayName: Push-to-Jira
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The push-to-jira Task will create JiraIssueMetadata Custom Resource

  params:
    - name: TICKET_NAME_PATTERN
      type: string
    - name: COMMIT_MESSAGE
      type: string
    - name: COMMIT_ID
      type: string
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      type: string
    - name: CODEBASE_NAME
      type: string
    - name: VCS_TAG
      type: string
    - name: VERSION
      type: string
    - name: GIT_URL
      description: Repository URL to clone from.
      type: string
  steps:
    - name: push-to-jira
      image: {{ include "edp-tekton.registry" . }}/epamedp/tekton-autotest:0.1.3
      env:
        - name: GIT_URL
          value: $(params.GIT_URL)
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(params.COMMIT_ID)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: VCS_TAG
          value: "$(params.VCS_TAG)"
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        #!/usr/bin/python

        import os
        import sys
        import re
        import json
        from random import randint

        ticket_message_pattern = os.getenv("TICKET_NAME_PATTERN")
        commit_message_with_change_id = os.getenv("COMMIT_MESSAGE")
        commit_id = os.getenv("COMMIT_ID")
        jira_issue_metadata_payload = os.getenv("JIRA_ISSUE_METADATA_PAYLOAD")
        codebase = os.getenv("CODEBASE_NAME")
        vcs_tag = os.getenv("VCS_TAG")
        version = os.getenv("VERSION")
        git_url = os.getenv("GIT_URL")

        print(f"[TEKTON][DEBUG] GIT_URL: {git_url}")
        print(f"[TEKTON][DEBUG] TICKET_NAME_PATTERN: {ticket_message_pattern}")
        print(f"[TEKTON][DEBUG] COMMIT_MESSAGE: \n{commit_message_with_change_id}")
        print(f"[TEKTON][DEBUG] COMMIT_ID: {commit_id}")
        print(f"[TEKTON][DEBUG] JIRA_ISSUE_METADATA_PAYLOAD: {jira_issue_metadata_payload}")
        print(f"[TEKTON][DEBUG] CODEBASE_NAME: {codebase}")
        print(f"[TEKTON][DEBUG] VCS_TAG: {vcs_tag}")
        print(f"[TEKTON][DEBUG] VERSION: {version}")
        print("")

        def convert_ssh_to_https_with_commit(ssh_url, commit_id):
            # Regular expression to extract information from SSH URLs
            match = re.match(r"git@(.*?):(.*?)/(.*?)\.git", ssh_url)
            if match:
                domain, user, repo = match.groups()
                # Use /commits/ for BitBucket, /commit/ for other domains
                commit_path = "commits" if "bitbucket.org" in domain else "commit"
                # Construct the HTTPS address with the commit_id at the end
                https_url = f"https://{domain}/{user}/{repo}/{commit_path}/{commit_id}"
                return https_url
            else:
                # If it doesn't match the SSH pattern, return the original URL
                return ssh_url

        def search_pattern(message, pattern):
            result = re.search(pattern, message)
            if result == None:
                print(f"[TEKTON] Message is invalid. The required pattern is {pattern}")
                sys.exit(1)
            return result.group()

        def set_params_jira_issue_metadata(metadata_name, commits, tickets, codebase, payload):
            print("[TEKTON] Getting JiraIssueMetadata CR template")
            template = {
              "apiVersion": "v2.edp.epam.com/v1",
              "kind": "JiraIssueMetadata",
              "metadata": {
                "name": "replace"
              },
              "spec": {
                "commits": "replace",
                "tickets": "replace",
                "codebaseName": "replace",
                "payload": "replace"
              }
            }
            print("[TEKTON] JiraIssueMetadata template has been fetched:\n{}".format(json.dumps(template, indent = 4)))

            template["metadata"]["name"] = metadata_name
            template["spec"]["commits"] = commits
            template["spec"]["tickets"] = tickets
            template["spec"]["codebaseName"] = codebase
            template["spec"]["payload"] = payload
            print("[TEKTON] JiraIssueMetadata template has been parameterized:\n{}".format(json.dumps(template, indent = 4)))

            return json.dumps(template)

        print(f"[TEKTON] Ticket name pattern has been fetched: {ticket_message_pattern}")
        print(f"[TEKTON] Commit message to validate has been fetched:\n{commit_message_with_change_id}")

        print("[TEKTON] Getting Ticket number and Commit message")
        ticket_number = search_pattern(commit_message_with_change_id, ticket_message_pattern)
        print(f"[TEKTON] Ticket number is {ticket_number}")

        git_commit_url = convert_ssh_to_https_with_commit(git_url, commit_id)
        print(f"[TEKTON] Git Commit URL {git_commit_url}")

        # Use the first line of commit message as a commit message for JiraIssueMetadata CR
        commit_message = commit_message_with_change_id.split("\n")[0]
        print(f"[TEKTON] Commit message was parsed: {commit_message}")

        print("[TEKTON] Preparing Jira Issue Link")
        linkInfo = {
            "ticket": ticket_number,
            "title": f"{commit_message} [{codebase}][{vcs_tag}]",
            "url": git_commit_url
        }
        print("[TEKTON] Issue Link:\n{}".format(json.dumps(linkInfo, indent = 4)))

        values = {
            "EDP_COMPONENT": codebase,
            "EDP_VERSION": version,
            "EDP_SEM_VERSION": re.sub("(-RC|-SNAPSHOT)\.\d+", "", version),
            "EDP_GITTAG": vcs_tag
        }
        print("[TEKTON] EDP predefined variables:\n{}".format(json.dumps(values, indent = 4)))

        payload = json.loads(jira_issue_metadata_payload)
        print("[TEKTON] JiraIssueMetadataPayload of {0} Codebase CR has been fetched:\n{1}".format(codebase, json.dumps(values, indent = 4)))

        if payload == None:
            payload = { "issuesLinks": [linkInfo] }
        else:
            for x in payload:
                for k in values:
                    payload[x] = payload[x].replace(k, values[k])
            payload["issuesLinks"] = [linkInfo]

        random_seed = ''.join(str(randint(0, 9)) for _ in range(8))
        metadata_name = f"{codebase}-{random_seed}"

        template_json = set_params_jira_issue_metadata(metadata_name, [commit_id], [ticket_number], codebase, json.dumps(payload, indent = 4))

        print("[TEKTON][DEBUG] Applying JiraIssueMetadata CR")
        os.system(f"kubectl apply -f - << EOF\n{template_json}\nEOF")

        print("[TEKTON][DEBUG] JiraIssueMetadata CR has been created")
