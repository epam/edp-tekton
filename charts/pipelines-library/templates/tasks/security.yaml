{{ if .Values.pipelines.deployableResources.tasks }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: security
  labels:
    {{- include "edp-tekton.labels" . | nindent 4 }}
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Scan Tools
    tekton.dev/tags: scan-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task scans the source code for security vulnerabilities using Semgrep and reports the results to DefectDojo and Dependency-Track for further analysis and tracking.
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: BASE_IMAGE_SEMGREP
      type: string
      description: Semgrep image
      default: {{ include "edp-tekton.registry" . }}/returntocorp/semgrep:1.109.0
    - name: BASE_IMAGE_GITLEAKS
      type: string
      description: Gitleaks image
      default: {{ include "edp-tekton.registry" . }}/zricethezav/gitleaks:v8.24.0
    - name: BASE_IMAGE_CURL
      type: string
      description: Curl image for uploading reports
      default: "{{ include "edp-tekton.registry" . }}/alpine/curl:8.12.0"
    - name: ci-defectdojo
      type: string
      description: name of the secret holding the DefectDojo CI integration data
      default: ci-defectdojo
    - name: SEMGREP_SCAN_REPORT
      type: string
      default: "semgrep-report.json"
    - name: GITLEAKS_SCAN_REPORT
      type: string
      default: "gitleaks-report.json"
    - name: DD_PRODUCT_NAME
      type: string
      default: ""
    - name: DD_ENGAGEMENT_NAME
      type: string
      default: ""
    - name: PROJECT_NAME
      description: That is the name of the project that will be updated/created on the dependency track side
      default: ''
      type: string
    - name: PROJECT_BRANCH
      description: That is the branch of the project that will be updated/created on the dependency track side
      default: ''
      type: string
    - name: ci-dependency-track
      type: string
      description: Name of the secret holding the ci-dependency-track api token
      default: ci-dependency-track
  steps:
    - name: semgrep-scan
      image: $(params.BASE_IMAGE_SEMGREP)
      computeResources: {}
      workingDir: $(workspaces.source.path)
      script: |
        set -e

        # The .docker/config.json file contained sensitive information, so it was added to the semgrep ignorelist.
        echo ".docker/config.json" >> .semgrepignore

        # Create gitleaks.toml file to exclude the .docker directory from scanning
        cat <<EOF > gitleaks.toml
        [extend]
        useDefault = true

        [allowlist]
        paths = [
          '''.docker/'''
        ]
        EOF

        semgrep --jobs 1 --config=auto . --json --output $(params.SEMGREP_SCAN_REPORT) --disable-version-check

      env:
        - name: HOME
          value: "$(workspaces.source.path)"
        - name: SEMGREP_VERSION_CACHE_PATH
          value: "$(workspaces.source.path)/.cache"
    - name: gitleaks-scan
      image: $(params.BASE_IMAGE_GITLEAKS)
      workingDir: $(workspaces.source.path)
      args:
        - "detect"
        - "--source"
        - "."
        - "--report-format=json"
        - "--report-path=$(params.GITLEAKS_SCAN_REPORT)"
        - "--no-git"
        - "--verbose"
        - "--exit-code=0"
        - "--config=gitleaks.toml"
      securityContext:
        runAsUser: 0
    - env:
        - name: API_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-dependency-track)
              key: token
              optional: true
        - name: DEPTRACK_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-dependency-track)
              key: url
              optional: true
        - name: PROJECT_NAME
          value: $(params.PROJECT_NAME)
        - name: PROJECT_BRANCH
          value: $(params.PROJECT_BRANCH)
      image: >-
        ghcr.io/cyclonedx/cdxgen:v11.1.10@sha256:f600e2a51c8bf1f50cca8c8dd89e838daca62e2b94b7c6caf14595451f247e7c
      name: cdxgen
      computeResources: {}
      script: >
        #!/usr/bin/env sh

        set -e

        set +x

        /opt/cdxgen/bin/cdxgen.js --api-key=$API_TOKEN --server-url=$DEPTRACK_URL --project-name=$PROJECT_NAME --project-version=$PROJECT_BRANCH --print
      workingDir: $(workspaces.source.path)
    - name: upload-report
      image: $(params.BASE_IMAGE_CURL)
      workingDir: $(workspaces.source.path)
      env:
        - name: DD_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: $(params.ci-defectdojo)
              optional: true
        - name: DD_HOST_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: $(params.ci-defectdojo)
              optional: true
      script: |
        #!/usr/bin/env sh
        set -e

        if [ -z "$DD_HOST_URL" ]
        then
          exit 0
        fi

        for REPORT_NAME in $(params.SEMGREP_SCAN_REPORT) $(params.GITLEAKS_SCAN_REPORT)
        do
            SCAN_TYPE=""
            if [ "$REPORT_NAME" = "$(params.SEMGREP_SCAN_REPORT)" ]; then
                SCAN_TYPE="Semgrep JSON Report"
            elif [ "$REPORT_NAME" = "$(params.GITLEAKS_SCAN_REPORT)" ]; then
                SCAN_TYPE="Gitleaks Scan"
            fi

            curl -X POST "${DD_HOST_URL}/api/v2/reimport-scan/" \
                -H "accept: application/json" \
                -H "Authorization: Token ${DD_TOKEN}" \
                -H "Content-Type: multipart/form-data" \
                -F "scan_date=$(date +%Y-%m-%d)" \
                -F "minimum_severity=Info" \
                -F "active=true" \
                -F "verified=false" \
                -F "scan_type=${SCAN_TYPE}" \
                -F "file=@${REPORT_NAME};type=application/json" \
                -F "product_type_name=Tenant" \
                -F "product_name=$(params.DD_PRODUCT_NAME)" \
                -F "engagement_name=$(params.DD_ENGAGEMENT_NAME)" \
                -F "auto_create_context=true" \
                -F "close_old_findings=true" \
                -F "push_to_jira=false" \
                -F "environment=Development" \
                -F "test_title=security"
        done
{{ end }}
