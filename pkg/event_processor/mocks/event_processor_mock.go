// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	event_processor "github.com/epam/edp-tekton/pkg/event_processor"
	mock "github.com/stretchr/testify/mock"
)

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

// Process provides a mock function with given fields: ctx, body, ns, eventType
func (_m *Processor) Process(ctx context.Context, body []byte, ns string, eventType string) (*event_processor.EventInfo, error) {
	ret := _m.Called(ctx, body, ns, eventType)

	var r0 *event_processor.EventInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, string) (*event_processor.EventInfo, error)); ok {
		return rf(ctx, body, ns, eventType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, string) *event_processor.EventInfo); ok {
		r0 = rf(ctx, body, ns, eventType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event_processor.EventInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string, string) error); ok {
		r1 = rf(ctx, body, ns, eventType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessor(t mockConstructorTestingTNewProcessor) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
